"""
Standalone PDF Report Generator for Deep Researcher Agent
"""
from io import BytesIO
import re
from datetime import datetime
from typing import Dict, Any

try:
    from reportlab.lib import colors
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False


def generate_pdf_report(research_data: Dict[str, Any]) -> bytes:
    """Generate a PDF report from research data"""
    if not REPORTLAB_AVAILABLE:
        raise ImportError("ReportLab is not installed. Please install it with: pip install reportlab")
    
    # Create a BytesIO buffer for the PDF
    buffer = BytesIO()
    
    # Create the PDF document
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        textColor=colors.HexColor('#1f77b4')
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=12,
        textColor=colors.HexColor('#2c3e50')
    )
    
    # Story list to hold all content
    story = []
    
    # Title
    story.append(Paragraph("üî¨ Deep Research Report", title_style))
    story.append(Spacer(1, 12))
    
    # Metadata table
    metadata = [
        ['Generated:', datetime.now().strftime('%B %d, %Y at %I:%M %p')],
        ['Findings:', str(research_data.get('findings_count', 0))],
        ['Completeness:', f"{research_data.get('progress_percentage', 100):.0f}%"]
    ]
    
    metadata_table = Table(metadata, colWidths=[1.5*inch, 4*inch])
    metadata_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.lightgrey),
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f8f9fa'))
    ]))
    
    story.append(metadata_table)
    story.append(Spacer(1, 20))
    
    # Executive Summary
    if research_data.get("executive_summary"):
        story.append(Paragraph("Executive Summary", heading_style))
        summary_text = _clean_text_for_pdf(research_data["executive_summary"])
        story.append(Paragraph(summary_text, styles['Normal']))
        story.append(Spacer(1, 20))
    
    # Main Research Content
    if research_data.get("synthesized_response"):
        story.append(Paragraph("Research Findings", heading_style))
        
        # Clean and format the content
        content = _clean_text_for_pdf(research_data["synthesized_response"])
        
        # Split by double newlines to create paragraphs
        paragraphs = content.split('\n\n')
        
        for para in paragraphs:
            if para.strip():
                # Handle bullet points
                if para.strip().startswith('‚Ä¢') or para.strip().startswith('-'):
                    lines = para.split('\n')
                    for line in lines:
                        if line.strip():
                            clean_line = line.strip().lstrip('‚Ä¢-').strip()
                            story.append(Paragraph(f"‚Ä¢ {clean_line}", styles['Normal']))
                else:
                    story.append(Paragraph(para.strip(), styles['Normal']))
                story.append(Spacer(1, 12))
    
    # Detailed Report Section (if different from synthesized response)
    if (research_data.get("detailed_report") and 
        research_data["detailed_report"] != research_data.get("synthesized_response")):
        story.append(Spacer(1, 20))
        story.append(Paragraph("Detailed Analysis", heading_style))
        
        # Process detailed report
        detailed_content = _clean_text_for_pdf(research_data["detailed_report"])
        paragraphs = detailed_content.split('\n\n')
        
        for para in paragraphs[:10]:  # Limit to avoid overly long PDFs
            if para.strip():
                story.append(Paragraph(para.strip(), styles['Normal']))
                story.append(Spacer(1, 10))
    
    # Footer
    story.append(Spacer(1, 30))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.grey,
        alignment=1  # Center alignment
    )
    story.append(Paragraph("Generated by Deep Researcher Agent v2.0", footer_style))
    
    # Build PDF
    doc.build(story)
    
    # Get the PDF data
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data


def _clean_text_for_pdf(text: str) -> str:
    """Clean text for PDF generation by removing problematic characters and formatting"""
    if not text:
        return ""
    
    # Remove markdown formatting and convert to ReportLab tags
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)  # Bold
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)      # Italic
    text = re.sub(r'`(.*?)`', r'<font name="Courier">\1</font>', text)  # Code
    
    # Remove markdown headers (convert to bold)
    text = re.sub(r'^#{1,6}\s*(.*?)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # Clean up bullet points
    text = re.sub(r'^[-*+]\s*', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    # Remove excessive whitespace
    text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
    text = text.strip()
    
    # Escape problematic characters for ReportLab
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;').replace('>', '&gt;')
    
    # Restore the formatting tags we want to keep
    text = text.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
    text = text.replace('&lt;i&gt;', '<i>').replace('&lt;/i&gt;', '</i>')
    text = text.replace('&lt;font name="Courier"&gt;', '<font name="Courier">').replace('&lt;/font&gt;', '</font>')
    
    return text


def test_pdf_generation():
    """Test the PDF generation with sample data"""
    test_research = {
        'synthesized_response': '''# Deep Learning in Natural Language Processing

This research explores **transformer architectures** and their impact on *modern NLP*.

## Key Findings

‚Ä¢ Attention mechanisms revolutionize sequence modeling
‚Ä¢ BERT and GPT models show remarkable performance
‚Ä¢ Transfer learning enables `few-shot` capabilities

The results demonstrate significant improvements across multiple benchmarks.''',
        'executive_summary': 'This study analyzes transformer architectures in NLP, showing **significant improvements** in performance.',
        'findings_count': 15,
        'progress_percentage': 95,
        'detailed_report': '''## Detailed Analysis

### Architecture Components
- Multi-head attention
- Position encoding  
- Feed-forward networks

### Performance Metrics
The models achieved state-of-the-art results on GLUE benchmarks.'''
    }
    
    try:
        pdf_data = generate_pdf_report(test_research)
        
        if pdf_data and len(pdf_data) > 1000:
            print(f'‚úÖ PDF generation successful! Size: {len(pdf_data):,} bytes')
            
            # Save test PDF
            with open('test_research_report.pdf', 'wb') as f:
                f.write(pdf_data)
            print('üìÑ Test PDF saved as test_research_report.pdf')
            return True
        else:
            print('‚ùå PDF generation failed - insufficient data')
            return False
            
    except Exception as e:
        print(f'‚ùå PDF generation error: {e}')
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("Testing PDF generation...")
    test_pdf_generation()